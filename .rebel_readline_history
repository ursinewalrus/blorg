1558390612660:(System/getProperty "java.class.path")
1558647732537:(monger)
1558647988451:(load monger_test)
1558648117519:(load-file "~/Desktop/blorg/monger_test.clj")
1558649505591:(load-file "~/Desktop/blorg/src/blorg/test.clj")
1558649598435:(load-file "src/blorg/test.clj")
1558649635027:(load "src/blorg/test.clj")
1558649646828:(ns blorg.core)
1558649649921:(load "src/blorg/test.clj")
1558649653385:(load-file "src/blorg/test.clj")
1558649980959:(load-file "src/blorg/test.cljs")
1558991421467:(simple-comp)
1558992139990:(render-comps)
1558993940463:(test-posts)
1559077832414:(for [x [1 2 3]] x)
1559077915250:(for [x [1 2 3]] (do (* x x) (+ x x)))
1559345230203:(re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>")
1559345260220:(let [src (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>")] src)
1559345285107:(let [src (nth (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>") 1)] src)
1559345294701:(let [src (nth (re-matches #"<i>(.*)</i>" "<>maw.jpg</i>") 1)] src)
1559345522706:(sub-ins "A")
1559345545254:(load "core.cljs")
1559345614631:(require 'blorg.core')
1559345755838:(require "blorg.core")
1559345776697:(require 'blorg.core')
1559345829673:(require 'source/blorg/blorg.core')
1559345832113:clear
1559345836088:(require 'blorg.core')
1559345866851:(js/console "A")
1559345887755:(js/console.log "A")
1559346130974:(in-ns 'namespace)
1559346154682:(load 'core.cljs'\n      )
1559346183536:clear
1559346238049:(load "~/Desktop/blorg/src/blorg/core.cljs")
1559346249955:(load "~/Desktop/blorg/src/blorg")
1559346322102:(require 'blorg.core')
1559346563289:(let [src (re-matches #"<i>mouf.jpg</i>" "blha lah <i>img.jpg</i>")] src)
1559346655678:(let [src (re-matches #"<i>(.*)</i>" "blha lah <i>img.jpg</i>")] src)
1559346688654:(let [src (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>")] src)
1559346716936:(let [src (re-matches #"*<i>(.*)</i>*" "<i>maw.jpg</i>")] src)
1559346733794:(let [src (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>")] src)
1559346753029:(let [src (re-matches #".*<i>(.*)</i>.*" "<i>maw.jpg</i>")] src)
1559346763470:(let [src (re-matches #".*<i>(.*)</i>.*" "asdas <i>maw.jpg</i>sadad")] src)
1559378583743:(let [src (re-matches #".*<i>(.*)</i>.*" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559378603324:(let [src (re-matches #".*<i>(.*)?</i>.*" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379353151:(let [src (re-matches #".*?<i>(.*)?</i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379364816:(let [src (re-matches #".*?<i>(.*)?<\\/i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379390187:(let [src (re-matches #".*?<i>(.*?)</i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379406255:(let [src (re-matches #".*?<i>(.*?)<i>.*?" "asdas <i>maw.jpg<i>sadad<i>stuff.png<i> kljakd")] src)
1559379465818:(let [src (re-matches #".*?<i>(.*?)<\\/i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379485862:(let [src (re-matches #".*?<i>(.*?)<\\\\/i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379665662:(let [src (re-match\n           " "[6~[6~asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)\n\n)\n)\n"\n                   )
1559379689593:(let [src (re-matches #".*?<i>(.*?)<\\i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379709572:(let [src (re-matches #".*?<i>(.*?)</i>.*?" "asdas <i>maw.jpg</i>sadad<i>stuff.png</i> kljakd")] src)
1559379715479:(let [src (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i>")] src)
1559379742483:(let [src (re-matches #"<i>(.*)</i>" "<i>maw.jpg</i> another <i>thing.jpg</i>")] src)
1559379752953:(let [src (re-matches #"<i>(.*?)</i>" "<i>maw.jpg</i> another <i>thing.jpg</i>")] src)
1559379788664:(let [src (re-matches #".*<i>(.*?)</i>.*" "<i>maw.jpg</i> another <i>thing.jpg</i>")] src)
1559379801641:(let [src (re-matches #".*?<i>(.*?)</i>.*" "<i>maw.jpg</i> another <i>thing.jpg</i>")] src)
1559379812655:(let [src (re-matches #".*?<i>(.*?)</i>.*?" "<i>maw.jpg</i> another <i>thing.jpg</i>")] src)
1559379824479:(let [src (re-matches #".*?<i>(.*?)</i>.*?" "<i>maw.jpg</i> another <i>thing.jpg</i>ddd")] src)
1559379870682:(let [src (re-matches #".*?<i>(.*?)<i>.*?" "<i>maw.jpg<i> another <i>thing.jpg<i>ddd")] src)
1559379950684:(let [src (re-matches #".* (.*\\\\.[jpg|png|gif]?) .*" "<i>maw.jpg</i> another <i>thing.jpg</i>ddd")] src)
1559380834966:(let [src (re-matches #".*?<i>(.*?)<\\/i>.*?" "the thing <i>image1.jpg</i> is that <i>other thing</i>")] src)
1559380854988:(let [src (re-matches #".*?<i>(.*?)</i>.*?" "the thing <i>image1.jpg</i> is that <i>other thing</i>")] src)
1559409524591:(take 3 "abcd")
1559409574189:(subs "abcde" 0 2)
1559409859096:(len "abc")
1559409871619:(count "abc")
1559409908470:(subs "abc" 0 3)
1559409913621:(subs "abc" 0 2)
1559409926163:(subs "abc" 1 2)
1559410002872:(start-with? "abcd" "ab")
1559410008477:(starts-with? "abcd" "ab")
1559410033823:(clojure.string/starts-with? "abcd" "ab")
1559410039856:(clojure.string/starts-with? "abcd" "ad")
1559410226074:(def shortcodes {"images" "<i>" "vids" "<v>"})
1559410253595:(def shortcodes (hash-map "images" "<i>" "vids" "<v>"))
1559410273670:(hash-map "1" 1 "2" 2)
1559410284253:(def codes (hash-map "1" 1 "2" 2))
1559410304330:(def a :b)
1559410804680:(map + '(1 2 3))
1559410816047:(map inc '(1 2 3))
1559411605344:(var codes (hash-map "1" 1 "2" 2))
1559411641770:(var codes [hash-map "1" 1 "2" 2])
1559411679819:(var codes {hash-map "1" 1 "2" 2})
1559411696953:(def codes {hash-map "1" 1 "2" 2})
1559411700237:(codes)
1559411701702:codes
1559411706438:(def codes {hash-map "1" 1 "2" 2})
1559411732948:(def per {:name "steve"})
1559777942755:(def a {1 "g" 3 "4"})
1559777949163:(get a 1)
1559778013493:(vals a\n      )
1559778167612:(get a 1)
1559778179982:(nth a 0)
1559778190820:(first a)
1559778192885:a
1559778199432:(def a {1 "g" 3 "4"})
1559778200400:a
1559778203789:(first a)
1559778210708:(val(first a))
1559778977641:(map "one two three" (str % "A"))
1559778984667:(map "one two three" #(str % "A"))
1559779002147:(map (str % "A") "a b d")
1559779009224:(map #(str % "A") "a b d")
1559780305063:a
1559780311077:(def a {1 "g" 3 "4"})
1559780312094:a
1559780315890:(first a)
1559780321432:(key(first a))
1560018397568:(count [1 2])
1560018404321:(count [1 2 4])
1560022432100:(clojure-version)
1560022447274:(println *clojure-version*)
1560036999699:(monger)
1560109282036:(app-state)
1560109335861:(load blorg.core)
1560109347934:(load `\n       blorg.core)
1560109356304:(load "blorg.core")
1560117723695:(js/alert "Am I connected to Figwheel?")
1560117801080:(in-ns 'blorg.core)
1560117807315:(app-state)
1560117818687:testatom
1560117821755:app-state
1560117849143:(reset! app-state {:id "this" :content "anything"})
1560117866512:(type app-state)
1560118143931:(reset! app-state {:id "this" :content "anything"})
1560118162402:(app-state)
1560120021668:(in-ns 'blore.core)
1560120026568:app-state
1560120037905:(in-ns 'blorg.core)
1560120039201:app-state
1560120359301:(in-ns 'blorg.core)
1560120366230:app-state
1560120415482:(:posts app-state)
1560120438628:app-state
1560120442708:(:posts app-state)
1560120485916:app-state
1560120686306:a
1560120688636:app-state
1560120696210:(:done-ajax app-state)
1560120714509:(:val \n app-state)
1560120748206:app-state
1560120756215:(first app-state)
1560120767524:(keys \n app-state)
1560120781549:(hash-map app-state)
1560120819620:(app-state)
1560120825326:(:posts app-state)
1560120851806:(:posts @app-state)
1560120887014:(app-state)
1560120890553:app-state
1560120923167:(:posts @app-state)
1560121384076:app-state
1560121402165:(:posts @app-state)
1560121441732:(if (= nil (:posts @app-state)) true false)
1560121658648:(in-ns 'blorg.core)
1560121661826:app-state
1560121683417:@app-state
1560121691380:(:posts @app-state)
1560121725759:(:posts app-state)
1560121730531:(:posts @app-state)
1560121734455:(in-ns 'blorg.core)
1560121736352:(:posts @app-state)
1560121800569:(in-ns 'blorg.core)
1560121801906:(:posts @app-state)
1560121811192:(:posts app-state)
1560121828706:(post_handler/get-posts app-state)
1560121835589:(:posts app-state)
1560121837334:(post_handler/get-posts app-state)
1560121881444:(:posts app-state)
1560121882563:(post_handler/get-posts app-state)
1560121887913:(:posts app-state)
1560121894034:(:posts @app-state)
1560121943989:(:posts app-state)
1560121945113:(:posts @app-state)
1560121948460:(post_handler/get-posts app-state)
1560121957060:(:posts @app-state)
1560121976692:(start-page)
1560122003942:(:posts @app-state)
1560122035410:(= nil (:posts app-state))
1560122040064:(= nil (:posts @app-state))
1560122128809:(:posts @app-state)
1560122148630:(!swap app-state assoc :tee "stuff")
1560122157660:(swap! app-state assoc :tee "stuff")
1560122171130:(swap! @app-state assoc :tee "stuff")
1560122172962:(swap! app-state assoc :tee "stuff")
1560122348600:(:posts @app-state)
1560122468042:(:posts-ready @app-state)
1560278498510:(def t [{:conn :db} "aa" "bb"])
1560278499888:t
1560278570268:(def {:conn :db}["aa" "bb"])
1560278586858:(def t "A" {:conn :db}["aa" "bb"])
1560278650395:(def [uri               "mongodb://localhost/test?maxPoolSize=128&waitQueueMultiple=5;waitQueueTimeoutMS=150;socketTimeoutMS=5500&autoConnectRetry=true;safe=false&w=1;wtimeout=2500;fsync=true"\n      {:keys [conn db]} (mg/connect-via-uri "mongodb://127.0.0.1/monger-test4")])
1560547752795:jjs/document.getElementsByClassNam "add-posts")
1560547763085:(js/document.getElementsByClassNam "add-posts")
1560547774461:(js/document.getElementsByClassName "add-posts")
1560619390525:(in-ns 'blorg.add_posts)
1560619395500:post-inputs
1560619401006:@post-inputs
1560619414316:@(:title @post-inputs)
1560619422174:@(:title post-inputs)
1560619429264:(:title @post-inputs)
1560619433288:@(:title post-inputs)
1560619438976:@(:title @post-inputs)
1560619445296:(:title @post-inputs)
1560619501936:(:title post-inputs)
1560619510116:@(:title post-inputs)
1560621188939:@(:auth post-inputs)
1560621192687:(:auth @post-inputs)
1560621197478:(:auth post-inputs)
1560621220951:(:content post-inputs)
1560621231960:(:content @post-inputs)
1560621237979:@(:content post-inputs)
1560621244482:(in-ns 'blorg.add_posts)
1560621246545:@(:content post-inputs)
1560621261231:(:auth @post-inputs)
1560621319882:post-inputs
1560621323281:@post-inputs
1560621335431:(add-post)
1560621347188:add-post
1560621353712:post-inputs
1560621358008:@post-inputs
1560621378577:(:content post-inputs)
1560621385403:@(:content post-inputs)
1560621402631:(:title post-inputs)
1560621425379:@(:content post-inputs)
1560621427958:(:content post-inputs)
1560621715657:post-inputs
1560707551860:(require '[buddy.core.hash :as hash])
1560707685925:(in-ns 'blorg.add_posts)
1560707754133:(buddyhash/sha256 "hash")
1560707849357:(in-ns 'blorg.add_posts)
1560707874478:(buddy-hash/sha256 "hashme")
1560707893081:(buddy_hash/sha256 "hashme")
1560708219453:(in-ns 'blorg.utils\n       )
1560708224018:(buddy_hash/sha256 "hashme")
1560708322392:(buddy.core.hash/sha256 "hashme")
1560708352315:cs
1560708510157:(hash/sha256 "hashme")
1560708596810:(in-ns 'blorg.handler)
1560708618377:(hash/sha256 "hashma")
1560708630823:(hash "hashma")
1560708706176:(hash "hashmadasdadasd[6~")
1560708728470:(bytes->hex (hash "hashmadasdadasd[6~"))
1560708743539:(-> (hash/sha256 "foo bar")\n    (bytes->hex))
1560708770531:(hash "hashmadasdadasd[6~")
1560708786793:(hash/sha256 "hashmadasdadasd[6~")
1560708802854:(hash "a")
1560708807409:(hash "b")
1560708812473:(hash "a")
1560708827252:(hash "SALTYSHITpasswordSALTHY")
1560708874907:(hash "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560708893709:(type(hash "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega"))
1560708959757:(hash/digest "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560708975193:(digest "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560709007318:(buddy-hash/sha256 "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560709019319:(in-ns 'blorg.handler)
1560709021480:(buddy-hash/sha256 "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560709112392:(in-ns 'blorg.handler)
1560709116526:(buddy-hash/sha256 "529b2b98-7956-428f-9b91-83ca6f8132e0wagawagaweega")
1560709350791:(require 'digest)
1560709392864:(in-ns 'blorg.handler)
1560709403439:(digest/md5 "foo")
1560709426743:(digest.digest/md5 "food")
1560709475186:(include-stylesheet "A")
1560709510667:(teste)
1560709517571:teste
1560717851226:(in-ns 'blorg.add_posts)
1560717865269:auth-inputs
1560717914250:post-inputs
1560717926614:auth-inputs
1560717936280:@auth-inputs
1560717951257:auth-inputs
1560717953484:@auth-inputs
1560717960742:(keys auth-inputs)
1560718167643:(.getElementById js/document "auth-form")
1560718185999:(js/FormData (.getElementById js/document "auth-form"))
1560718203747:(js/FormData. (.getElementById js/document "auth-form"))
1560718214755:(keys (js/FormData. (.getElementById js/document "auth-form")))
1560718216436:(js/FormData. (.getElementById js/document "auth-form"))
1560719223768:(.getElementById js/document "username")
1560719278460:(val (.getElementById js/document "username"))
1560719311597:(:val (.getElementById js/document "username"))
1560719325069:(:value (.getElementById js/document "username"))
1560719343370:(:props (.getElementById js/document "username"))
1560719367861:(.value (.getElementById js/document "username"))
1560719383563:(.-value (.getElementById js/document "username"))
1560797427819:(java.util.UUID/randomUUID)
1560797492726:(import java.util.UUID)
1560797505128:(import "java.util.UUID")
1560797531613:(import 'java.util.UUID)
1560797690006:java.util.Map
1560797702197:(.-x (java.awt.Point. 1 2))
1560797823913:(java.lang.Math/abs -2)
1560978059962:(in-ns 'blorg.add_posts)
1560978063500:auth-inputs
1560978280331:post-inputs
1560978289482:@post-inputs
1560978294727:post-inputs
1560983438701:(compare "2019-06-19T22:28:53.789Z" "2019-06-19T23:33:27.305Z")
1560983446547:(compare "2019-06-19T23:33:27.305Z" "2019-06-19T22:28:53.789Z")
1561225806257:app-state
1561225819877:(in-in 'blorg.core)
1561225830056:(in-ns 'blorg.core)
1561225832713:app-state
1561225838428:(first app-state)
1561225857330:(:posts app-state)
1561225862509:(:posts @app-state)
1561225872917:(def p (:posts @app-state)\n  )
1561225874173:p
1561225879075:(first p)
1561225885906:(def p (first p))
1561225886582:p
1561225897234:(def c (:comments -))
1561225898161:c
1561225901242:(def c (:comments p))
1561225901624:c
1561225913554:(first c)
1561225945320:(loop [com c] (str com))
1561225953115:(loop [com c] (str (first com)))
1561225960862:(loop [com c] (str (rest com)))
1561225971460:(loop [com c] (str (rest (rest com))))
1561225981185:(loop [com c] (type (rest (rest com))))
1561225993408:(loop [com c] (rest (rest com)))
1561226074530:(first c)
1561226088762:(first '())'
1561226368303:(def a `[])
1561226369059:a
1561226382548:(into a `[1])
1561226383247:a
1561226396176:(into a `[[1]])
1561226403711:(into a `[[4]])
1561226422999:(into (into a `[[4]]) `[[5]])
1561227095964:(into '[] '[[1 2][3 4]])
1561227468460:(defn a [(:bb b) c](str b))
1561227499786:(defn a [[:bb b] c](str b))
1561227510198:(a {:bb "gg")
1561227515366:(a {:bb "gg"})
1561227522324:a
1561227525663:(defn a [[:bb b] c](str b))
1561227547750:(a (hash-map {:bb "a!"}))
1561227611207:a
1561230727058:(check-page "add-posts")
1561584143685:screen mongo
1561654847897:(in-ns 'blorg.handler)
1561654902052:{:token (butils/extract-cookies _ "token")}
1561655438536:(in-ns 'blorg.db_interface)
1561655453777:(logged-in-user-is-admin "kfuck")
1561655468693:get-all-posts
1561655488683:(get-all-posts)
1561655714725:(in-ns 'blorg.core)
1561655725623:(check-page "add-posts")
1561656848282:(in-ns 'blorg.db_interface)
1561656855261:help
1561656857046:-hel-
1561656860108:(help)
1561657838910:(in-ns 'blorg.add_posts)
1561657847549:(rutils/get "token" "")
1561657957921:(str(rutils/get "token" ""))
1561658003110:(.get goog.net.cookies "token")
1561658196514:(.get goog.net.cookies "tokedn")
1562099069675:(in-ns 'blorg.core)
1562099149704:(window.location)
1562099167135:(.-href window.location)
1562099253335:(url/url (.-href window.location))
1562099380102:(clojure.string/splite #"\\?" (.-href \n                              window.location))
1562099400188:(clojure.string/split #"\\?" (.-href \n                              window.location))
1562099415131:(clojure.string/split #"\\?" (.-href window.location))
1562099422233:(clojure.string/split #"" (.-href window.location))
1562099429187:(clojure.string/split #"=" (.-href window.location))
1562099436311:(.-href window.location)
1562099470585:(type (clojure.string/split #"\\?" (.-href window.location)))
1562099484073:(first (clojure.string/split #"\\?" (.-href window.location)))
1562099498709:(clojure.string/split #"\\\\?" (.-href window.location))
1562099522763:(clojure.string/split #"\\?" (str(.-href window.location)))
1562099553576:(clojure.string/split (.-href window.location) #"\\?")
1562099828139:(->> (.-href window.location) (clojure.string/split #"\\?"))
1562099836893:(-> (.-href window.location) (clojure.string/split #"\\?"))
1562100064120:(-> (.-href window.location) (clojure.string/split #"\\?") )
1562100180683:(-> (.-href window.location) (clojure.string/split #"\\?")   (fn [arg](filterv #(clojure.string/includes % "title=") arg  ))\n    )
1562100289557:(-> (.-href window.location) (clojure.string/split #"\\?"))
1562100430310:(clojure.string/split (-.href window.location))
1562100446191:(clojure.string/split (-.href window.location) #"\\?")
1562100460137:(clojure.string/split (.-href window.location) #"\\?")
1562100514490:(->> (.-href window.location) (clojure.string/split #"\\?"))
1562100534083:(-> \n (.-href window.location) \n (clojure.string/split #"\\?")   \n (fn [arg](filter #(clojure.string/includes % "title=") arg  )))
1562100786279:(in-ns 'blorg.utils)
1562100820679:(get-qs-param-value)
1562100837655:(get-qs-param-value "title")
1562103917222:(second (get-qs-param-value "title"))
1562103925207:(second (list "A"))
1562103943276:(get-qs-param-value "title")
1562103961759:(second (list "A"))
1562103963914:(get-qs-param-value "title")
1562103967665:(get-qs-param-value "titlse")
1562103968904:(get-qs-param-value "title")
1562172491940:(in-ns 'blorg.core)
1562172496988:app-state
1562172592568:(:posts app-state)
1562172600268:(:posts @app-state)
1562172610959:(get app-state :posts)
1562172616436:(get @app-state :posts)
1562173211965:(get app-state :posts)
1562173215715:(in-ns 'blorg.core)
1562173217015:(get app-state :posts)
1562173220408:(:posts @app-state)
1562341760474:(for [[k v] {:a "a" :b "b"](print (str k v)))
1562341777409:(for [[k v] {:a "a" :b "b"}](print (str k v)))
1562343244542:(defmacro my-print\n  [expression]\n  (list 'let ['result expression]\n        (list 'println 'result)\n        'result))
1562343253098:(my-print (+ 2 4))
1562343261808:~(my-print (+ 2 4))
1562343271358:((my-print (+ 2 4)))
1562343273328:(my-print (+ 2 4))
1562343315109:(my-print "A")
1562343319328:(print "A")
1562343415820:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n        'result)
1562343422166:(my-print "A")
1562343432884:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n        ~result)
1562343438073:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n        result)
1562343452464:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n       )
1562343457262:(my-print "A")
1562343465743:((my-print "A"))
1562343477856:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n        result)
1562343485840:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println `result)\n        `result)
1562343494818:(my-pring "A")
1562343498854:(my-print "A")
1562343508443:(print (my-print "A"))
1562343538581:(defmacro my-print\n  [expression]\n  `let [`result expression]\n        (`println result)\n        `result)
1562343554231:(defmacro my-print\n  [expression]\n  (`let [`result expression]\n        (`println result)\n        `result))
1562343558293:(defmacro my-print\n  [expression]\n  (`let [`result expression]\n        (`println `result)\n        `result))
1562343562908:(my-print "A")
1562343574359:(my-print (+1 2 )\n          )
1562343577434:(my-print (+ 1 2 )\n          )
1562343608287:(defmacro my-print\n  [expression]\n  (`let [result expression]\n        (println result)\n        result))
1562343617853:(defmacro my-print\n  [expression]\n  (`let [result expression]\n        (`println result)\n        result))
1562343621791:(defmacro my-print\n  [expression]\n  (`let [`result expression]\n        (`println result)\n        result))
1562343723807:(defmacro my-print [ex] (`let [`result ex] `result))
1562343730839:(my-print (+ 1 2))
1562343742770:(defmacro my-print\n  [expression]\n  (list 'let ['result expression]\n        (list 'println 'result)\n        'result))
1562343745692:(my-print (+ 1 2))
1562343760982:(defmacro my-print [ex] `(let [`result ex] `result))
1562343767177:(defmacro my-print [ex] `(let [result ex] result))
1562343807775:`( + 1 2)
1562343822022:(`( + 1 2))
1562343835384:`( ~+ 1 2)
1562343848180:`( ~+ ~1 ~2)
1562343855197:~`( ~+ ~1 ~2)
1562343883748:`(+ 1 ~(inc 1))
1562345633022:(def a [{:a "A"}])
1562345633574:a
1562345644341:(conj {:b "B"} a)
1562345660239:(conj a {:b "B"} )
1562441755914:(in-ns 'blorg.core)
1562441767558:(.gapip.load js/window)
1562441780251:(.gapi.load js/window)
1562441811277:((.gapi.load "client:auth2" (prn)) js/window)
1562441974699:(js/gapi.load)
1562441979314:(js/gapi.load "AA" )
1562441986729:(js/gapi.load "AA" prn)
1562441998500:(js/gapi.load "AA" (prn "aaaa"))
1562450363675:(js/aa "Ddd")
1562450374308:(js/aa "ddDdd")
1562782129775:(in-ns 'blorg.google-auth)
1562782139822:(google-auth-comp)
1562782156175:(js/gapi.signin2.render\n )
1562782298369:(js/signin2.render "g-signin2")
1562782368445:(js/gapi.signin2.render "g-signin2")
1562782393009:(gapi/signin2.render "g-signin2")
1562782399793:(js/gapi.signin2.render "g-signin2")
1562782458403:(js/gapi.load "auth2")
1562782460561:(js/gapi.signin2.render "g-signin2")
1562782487705:(js/gapi.load "auth2")
1562782489508:(js/gapi.signin2.render "g-signin2")
1562782804806:(in-ns 'blorg.google-auth)
1562782817920:(js/gapi.signin2.render "g-signin2" #js {"scope"     "profile email"\n                                            "width"     240\n                                            "height"    50\n                                            "longtitle" true\n                                            "theme"     "dark"\n                                            "onsuccess" on-success})
1562782904507:(in-ns 'blorg.google-auth)
1562782907171:(js/gapi.signin2.render "g-signin2" #js {"scope"     "profile email"\n                                            "width"     240\n                                            "height"    50\n                                            "longtitle" true\n                                            "theme"     "dark"\n                                            "onsuccess" on-success})
1562784163503:(js/gapi.signin2.render "g-signin2" (clj->js {:scope    "profile email" :width     240 :height    50 : longtitle true :theme     "dark" }))
1562784214756:(js/gapi.signin2.render "g-signin2" #J {"scope"   "profile email" "width"    240 "height"    50 "longtitle" true "theme"     "dark" })
1562784273876:(js/gapi.signin2.render "g-signin2" #js {"scope"     "profile email"\n                               "width"     240\n                               "height"    50\n                               "longtitle" true\n                               "theme"     "dark"})
1562787805045:(.. \n \n )
1562787827643:google-user
1562841701548:(in-ns 'blorg.core)
1562844868698:(in-ns 'blorg.api_handling)
1562844904076:(log-in-oauth-user {:type "google" :token "hell is other people"})
1562845445602:((log-in-oauth-user {:type "google" :token "hell is other people"}))
1562845530203:(log-in-oauth-user {:type "google" :token "hell is other people"})
1562846843110:(defn ds [[k v] {:type :token}] (print (str k v)))
1562846855047:(ds {:type "aa" :token "fdd"})
1562846882872:(defn ds [v {:type}] (print (str v)))
1562846893500:(defn ds [[v] {:type}] (print (str v)))
1562846952022:(defn ds [v {:type}] (print (str v)))
1562846983896:(defn ds [v {:type}] v)
1562846989284:(defn ds [v {:type :val}] v)
1562846992759:(ds {:type "aa" :token "fdd"})
1562847104928:(defn ds [v {:type :val}] v)
1562847112440:(GET "https://google.com")
1562858975768:(client/get "http://google.com")
1562859111212:ddDD
1562859776525:(in-ns 'blorg.utils)
1562859790840:clj-http.client
1562860213634:(in-ns 'blorg.api_handling)
1562860236678:(log-in-oauth-user {:type "google" :token "hellisotherpeople"})
1562861444545:(log-in-oauth-user {:type "google" :token "heyJhbGciOiJSUzI1NiIsImtpZCI6IjZlNTUwOGQyNzk2NWFkNzkwN2MyMzIyMTJkZWZhNDhlZDc2MzcyN2UiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzYwMjE1MjcwOTgyLXZsZjAycXJybGd0MzlrZmxpNW9ndDUzNzlkMWR1YmxsLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzYwMjE1MjcwOTgyLXZsZjAycXJybGd0MzlrZmxpNW9ndDUzNzlkMWR1YmxsLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTE3OTU2NjI3MzA2MTMwNDY2NTk4IiwiZW1haWwiOiJqb3Noa2VyeGhhbGxpa0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6ImpTVjROVEc4MjFEYnN2X2g5Q2o5QmciLCJuYW1lIjoiSm9zaCBLayIsInBpY3R1cmUiOiJodHRwczovL2xoNi5nb29nbGV1c2VyY29udGVudC5jb20vLUNKUGRIRW9ZMUtvL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBL0FDSGkzcmQwUzF0MEFzWFhiS2wzSzRYSVg3NEx2Rzh3RXcvczk2LWMvcGhvdG8uanBnIiwiZ2l2ZW5fbmFtZSI6Ikpvc2giLCJmYW1pbHlfbmFtZSI6IktrIiwibG9jYWxlIjoiZW4iLCJpYXQiOjE1NjI3ODgzOTgsImV4cCI6MTU2Mjc5MTk5OCwianRpIjoiZTEzN2QxODg2MjM4MWI2NTg3YzM3OTVkY2FjNGQ3NGNjYWZmOThkMyJ9.Yqgt_ZbHhEjwcs6iZkEIre_JwMAlmy6ZQzpIS4wiWSQRy0fUOBgmTp0k1SE_r9C-Bgoz85SiZNfriPZhUGbssRh1QvY4uaVA-xP7AtTHzm0M5nukZd_v4h_aUFYCdlJ4iEk-UFrCved-_p-L5_xmFLbViOws5yfQi3XR0AtFDNnE_CQEnPSxarQJ4Xs0XVFsA5e9UasEvthbrzzvoe5w7BQxu4asEDvGGkUnKPhZp8ZjDO4ggayUbDHvqxZQwpcRwXkbOXs9dVVgKNE02G7zqjf85pQd-rMZLakdADecjKfao7lDBR3S3O9gQmEgQNFYumPGYvn1rg50jbBE6f7odQ"})
1562964170394:(def a {:google-settings\n {:client_id "760215270982-vlf02qrrlgt39kfli5ogt5379d1dubll.apps.googleusercontent.com"\n  :iss ["https://accounts.google.com" "accounts.google.com" ]\n  :azp  "760215270982-vlf02qrrlgt39kfli5ogt5379d1dubll.apps.googleusercontent.com"\n  :aud "760215270982-vlf02qrrlgt39kfli5ogt5379d1dubll.apps.googleusercontent.com"\n}})
1562964171229:a
1562964182353:(.. :google-settings a)
1562964194463:(..  a :google-settings)
1562964205816:(:google-settings a)
1562964215004:(-> :google-settings :iss a)
1562964225030:(-> a :google-settings :iss)
1563045607233:(read-string "1231413123")
1563045832559:(<(compare "Abc" "Acb"))
1563045839082:(>(compare "Abc" "Acb"))
1563045850060:(compare "abc" "acb")
1563046766281:(read-string "1")
1563046775622:(clojure.string/read-string "1.1")
1563046954128:(str "A" "A")
1563055389078:(in-ns 'blorg.utils)
1563055448591:(set-auth-cookie {:token "whatever" :user "me"})
1563127465291:(def a (atom {:a {:b "c"}}))
1563127466069:a
1563127469815:@a
1563127498872:(swap! (:a a) assoc :b "d")
1563127509680:(swap! a assoc :b "d")
1563127526341:(swap! a assoc (:a :b) "d")
1563127576393:(swap! a assoc-in (:a :b) "d")
1563127596539:(swap! a assoc-in [:a :b] "d")
1563127601684:(swap! a assoc-in [:a :b] "cccc")
1563128263980:(in-ns 'blorg.api_handling)
1563128270078:as/app-state
1563128299695:(as/app-state)
1563128306402:(deref as/app-state)
1563128323366:(in-ns 'blorg.app_state)
1563128327917:app-state
1563129254008:(in-ns 'blorg.add_posts)
1563129257740:as/app-state
1563640314986:(in-ns 'blorg.core)
1563640322735:app-state
1563640342017:as/app-state
1563652139476:(in-ns 'blorg.add_posts)
1563652142349:as/app-state
1563652219652:(-> as/app-state :form-components :comments)
1563652280199:(-> (deref as/app-state) :form-components :comments)
1563652296842:(type (-> (deref as/app-state) :form-components :comments))
1563652430673:(swap! as/app-state :form-components :comments "hey")
1563652439984:(swap! as/app-state assoc :form-components :comments "hey")
1563652464103:as/app-state
1563652481969:(-> (deref as/app-state) :form-components :comments)
1563652557528:(swap! as/app-state assoc-in :form-components :comments "hey")
1563652589594:(swap! as/app-state assoc-in [:form-components :comments] "hey")
1563652829029:(reduce -> as/app-state [:form-components :comments])
1563652842832:(reduce (->) as/app-state [:form-components :comments])
1563652859334:(reduce inc 4 [1 2 3])
1563652924944:(reduce #(-> %) as/app-state [:form-components :comments])
1563652951206:(prn (reduce #(-> %) as/app-state [:form-components :comments]))
1563652971449:(def a {:a {:b "c"}})
1563652971983:a
1563652984916:(-> a :a :b)
1563653020824:(reduce #(-> %) a [:a :b])
1563653035754:(reduce #(-> %1 %2) a [:a :b])
1563654353507:a
1563654369473:(def a {:a {:b "C"}})
1563654370894:a
1563654372869:(reduce #(-> %1 %2) a [:a :b])
1563654387416:(def a (atom {:a {:b "C"}}))
1563654388316:a
1563654391323:(reduce #(-> %1 %2) a [:a :b])
1563654395185:(reduce #(-> %1 %2) @a [:a :b])
1563655598671:as/app-state
1563656526320:(:form-components @as/app-state)
1563658745270:(into {:a "A"} {:b "B"})
1563659302770:as/app-state
1563659312811:(in-ns 'blorg.core)
1563659313837:as/app-state
1563720507952:(def a {:a "A"})
1563720518355:(contains? a :b)
1563720520559:(contains? a :a)
1563721521338:as/app-state
1563721529188:(in-ns 'blorg.core)
1563721530389:as/app-state
1563721564232:(-> as/app-state :post)
1563721569349:(-> @as/app-state :post)
1563721575454:(-> @as/app-state :posts)
1563721583026:(-> @as/app-state :posts :comments)
1563721591777:(-> as/app-state :posts :comments)
1563721600090:@(-> as/app-state :posts :comments)
1563721605754:(-> @as/app-state :posts)
1563721621917:(-> @as/app-state :posts first)
1563721625204:(-> @as/app-state :posts first :comments)
1563721645864:(-> as/app-state :posts first :comments)
1563721647007:(-> @as/app-state :posts first :comments)
1563722805332:as/app-state
1563722984830:(-> as/app-state :posts first :comments)
1563722994119:(-> @as/app-state :posts first :comments)
1563723123616:(swap! assoc-in as/app-state [:posts] (into (-> as/app-state :posts first :comments) "another shitter"))
1563723179518:(swap! assoc-in as/app-state [:posts] (into (:posts as/app-state) "another shitter"))
1563723199136:(swap! assoc-in as/app-state [:posts] "sss")
1563723207654:(swap! assoc-in @as/app-state [:posts] "sss")
1563723226603:as/app-state
1563723281023:(swap! as/app-state assoc-in [:posts] (into (-> as/app-state :posts first :comments) "another shitter"))
1563723485592:@(:posts as/app-state)
1563723488914:(:posts as/app-state)
1563723492743:(:posts @as/app-state)
1563726591889:(defmacro aa [args] (prn args))
1563726598975:(aa "a" "b")
1563726608881:(defmacro aa [args] (prn ~args))
1563726609884:(aa "a" "b")
1563726616655:(defmacro aa [args] `(prn ~args))
1563726617744:(aa "a" "b")
1563726686180:(defmacro aa [x] (prn x))
1563726686722:a
1563726687927:aa
1563726698419:(aa :ss)
1563726715210:(defmacro aa [x] x)
1563726719445:(aa "d"\n    )
1563726723787:(aa "d")
1563726730534:(print "A")
1563726740926:(print (aa "D"))
1563726768566:(defmacro aa [x] `(prn x))
1563726771383:(aa 4)
1563726840417:(defmacro aa [x] `(* x x))
1563726845047:(aa 4)
1563726858802:#(aa 4)
1563726889398:(defmacro aa [x] (list * x x))
1563726892510:(aa 3)
1563726902771:#(aa 3)
1563726942754:(defmacro [args] (prn (first args)))
1563726956097:(defmacro aa  [args] (prn (first args)))
1563726964123:(aa "A" "b")
1563726980913:(defmacro aa  [args] (prn ~(first args)))
1563726982525:(aa "A" "b")
1563726998718:(defmacro aa [args] (first args))
1563727011031:(print (aa "abc"))
1563727066312:(defmacro aa [args] (first args))
1563727073683:(aa (abc))
1563727081907:(aa ("abc"))
1563727112141:(defmacro aa [args] (first args))
1563727120423:(aa #(+ - *))
1563727129547:(print (aa #(+ - *)))
1563727199380:(defmacro infix [vec] `((second vect)(first vect)(last vect)))
1563727208289:(aa (+ 1 1))
1563727224751:(aa (1 + 1))
1563727240384:(defmacro infix\n  "Use this macro when you pine for the notation of your childhood"\n  [infixed]\n  (list (second infixed) (first infixed) (last infixed)))
1563727248564:(infix (1 + 1))
1563727711833:(def a [& args] (print (flatten args)))
1563727717738:(defn a [& args] (print (flatten args)))
1563727731878:(a "a" "B")
1563728769260:(apply #(+ %1 %2) [1 2])
1564367138461:(in-bs 'blorg.core)
1564367145913:(in-ns 'blorg.core)
1564367149985:as/app-state
1564367208263:(in-ns 'core.add_posts)
1564367209343:as/app-state
1564367222725:(in-ns 'blorg.add_posts)
1564367223871:as/app-state
1564539665670:(in-ns 'blorg.grid)
1564539676342:context
1564539685008:@context
1564539719669:(.getElementById js/document "grid-canvas")
1564539756680:@context
1564539758899:context
1564539810390:@context
1564539821107:context
1564539842324:(.getElementById js/document "grid-canvas")
1564539858303:context
1564539861195:@context
1564539901777:(.-width (.getElementById js/document "grid-canvas"))
1564539941803:(.getContext (.getElementById js/document "grid-canvas") "2d")
1564540030365:@context
1564540034348:context
1564540043630:(:ctx @context)
1564540049949:(:ctx context)
1564540062785:(in-ns 'blorg.grid)
1564540067289:context
1564540075181:@context
1564540141711:(.getContext (.getElementById js/document "grid-canvas") "2d")
1564540225442:grid-state
1564540485297:(.-width (.getElementById js/document "grid-canvas"))
1564540487652:(.getContext (.getElementById js/document "grid-canvas") "2d")
1564540845951:grid-state
1564541161054:(.beginPath (:context grid-state))
1564541170616:(.beginPath (:context @grid-state))
1564541174704:grid-state
1564541189474:(.beginPath @(:context grid-state))
1564541192896:grid-state
1564541207617:(:context grid-state)
1564541211673:(:context @grid-state)
1564541223539:(.beginPath (:context @grid-state))
1564541228527:(.beginPath (:context grid-state))
1564541236602:(.beginPath (:context @grid-state))
1564541475881:(:meta grid-state)
1564541481005:(:meta @grid-state)
1564541491010:(:width (:meta grid-state))
1564541497785:(:width (:meta @grid-state))
1564541525017:(/ (:width (:meta @grid-state)) (:cols @grid-state))
1564546728678:(.getElementsByClassName js/document "center-area")
1564546739888:(.-width (.getElementsByClassName js/document "center-area"))
1564546777831:(.-width (first (.getElementsByClassName js/document "center-area")))
1564546794328:(get (.getElementsByClassName js/document "center-area") 0)
1564546822004:(keys (.getElementsByClassName js/document "center-area"))
1564546911418:(array-seq (.getElementsByClassName js/document "center-area"))
1564546929980:(first (array-seq (.getElementsByClassName js/document "center-area")))
1564547000251:(.getElementByIdjs/document "center-area")
1564547008758:(.getElementById js/document "center-area")
1564547017149:(.-width (.getElementById js/document "center-area"))
1564547033664:(keys (.getElementById js/document "center-area"))
1564547043499:(def area (.getElementById js/document "center-area"))
1564547044522:area
1564547076081:(.getElementById js/document "center-area")
1564547080876:(def area (.getElementById js/document "center-area"))
1564547084996:(.-width area)
1564547115496:(.-width (.getElementById js/document "grid-canvas")\n         )
1564547149375:(.-width (.getElementById js/document "center-area"))
1564547157872:(.-width (.getElementById js/document "center-area") 1)
1564547391910:(.getBoundingClientRect (.getElementById js/document "center-area"))
1564547406619:(-.width (.getBoundingClientRect (.getElementById js/document "center-area")))
1564547415548:(.-width (.getBoundingClientRect (.getElementById js/document "center-area")))
1564547474419:grid-stae
1564547475413:grid-state
1564551165590:(def g (repeat 5 (repeat 5)))
1564551166313:g
1564551388661:(in-ns 'blorg.grid)
1564551391389:grid-state
1564553178861:(def of {:vert 1 :hort 1})
1564553194351:(scroll-grid of)
1564553214958:[A\n \n ]
1564553222851:(def of {:vert 10 :hort 10})
1564553225266:(scroll-grid of)
1564553275535:(def of {:vert -10 :hort -10})
1564553277127:(scroll-grid of)
1564553284979:[\n \n \n \n \n \n A\n ]
1564553288362:(scroll-grid of)
1564553363061:(def of {:vert -10 :hort -10})
1564553364483:(scroll-grid of)
1564553443670:(def of {:vert -10 :hort -10})
1564553445012:(scroll-grid of)
1564553512444:(def of {:vert -10 :hort -10})
1564553513482:(scroll-grid of)
1564553522763:(def of {:vert 10 :hort 10})
1564553524016:(scroll-grid of)
1564553722041:(def of {:vert 10 :hort 10})
1564553723308:(scroll-grid of)
1564553770326:(def of {:vert -10 :hort -10})
1564553772182:(scroll-grid of)
1564553780700:(def of {:vert 10 :hort 10})
1564553782054:(scroll-grid of)
1564553790351:(def of {:vert -10 :hort -10})
1564553791803:(scroll-grid of)
1564553862106:grid-state
1564553878064:(scroll-grid of)
1564553880088:grid-state
1564573116135:(in-ns 'blorg.grid)
1564573120197:(draw-grid)
1564573800685:grid-state
1564575232532:(abs -4)
1564575251075:(Math/abs -1)
1564575253996:(Math/abs 1)
1564575643798:grid-state
1564579428187:(defmacro m [k-vs] `{:a "a"})
1564579437158:(m "A")
1564579452853:(defmacro m [k-vs] `{:a "a" ~@k-vs})
1564579481447:(defmacro m [k-vs] `~@k-vs)
1564579598337:(defn m [k-vs] {:a "A"})
1564579602024:(m "A")
1564579623360:(defn m [k-vs] (into {:a "A"} k-vs)\n  )
1564579631154:(m {:b "B"})
1564579764304:(defn m [k-vs] (into {:a "A"} k-vs))
1564579765794:(m {:b "B"})
1564589455982:(Math/abs -1)
1564589467270:(Math/floor 2.3)
